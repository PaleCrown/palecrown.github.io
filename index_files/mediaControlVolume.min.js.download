define("mediaControlVolume",["lodash","react","core","santaProps"],function(a,b,c,d){"use strict";return{displayName:"MediaControlVolume",mixins:[c.compMixins.skinBasedComp],propTypes:{style:b.PropTypes.object,playerId:b.PropTypes.string.isRequired,mediaAspect:d.Types.SiteAspects.mediaAspect.isRequired,handleBehavior:d.Types.Behaviors.handleBehavior.isRequired},statics:{useSantaTypes:true},getInitialState:function(){return{muted:false,volume:0}},componentDidMount:function(){this.props.mediaAspect.registerStateChange(this.props.id,this.props.playerId,this.setVolumeState)},componentWillUnmount:function(){this.props.mediaAspect.unregisterStateChange(this.props.id,this.props.playerId)},setVolumeState:function(a){if(this.state.volume!==a.volume||this.state.muted!==a.muted){this.setState({muted:a.muted,volume:a.volume})}},clickActionUp:function(){this.props.handleBehavior({type:"comp",targetId:this.props.playerId,name:"setVolume",params:{volume:this.state.volume+.1}})},clickActionDown:function(){this.props.handleBehavior({type:"comp",targetId:this.props.playerId,name:"setVolume",params:{volume:this.state.volume-.1}})},clickActionMute:function(){if(this.state.muted){this.props.handleBehavior({type:"comp",targetId:this.props.playerId,name:"unMute"})}else{this.props.handleBehavior({type:"comp",targetId:this.props.playerId,name:"mute"})}},getSkinProperties:function(){var b={"":{style:this.props.style},volume:{className:this.classSet({muted:this.state.muted})},mute:{onClick:this.clickActionMute}};if(!this.state.muted){a.assign(b,{up:{onClick:this.clickActionUp},down:{onClick:this.clickActionDown}})}return b}}});